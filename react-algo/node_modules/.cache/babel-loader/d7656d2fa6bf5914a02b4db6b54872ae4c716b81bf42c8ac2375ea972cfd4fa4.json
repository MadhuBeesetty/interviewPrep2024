{"ast":null,"code":"class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n;\nclass BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n  insert(value) {\n    let newNode = new TreeNode(value);\n    if (!this.root) {\n      console.log(\"i am here\");\n      this.root = newNode;\n      return newNode;\n    }\n    let current = this.root;\n    while (true) {\n      if (current.value > value) {\n        if (!current.left) {\n          current.left = newNode;\n          return;\n        }\n        current = current.left;\n      } else if (value > current.value) {\n        if (!current.right) {\n          current.right = newNode;\n          return;\n        }\n        current = current.right;\n      } else {\n        return;\n      }\n    }\n  }\n  preorder(current = this.root) {\n    // node left right\n    if (!current) return;\n    console.log(current.value);\n    this.preorder(current.left);\n    this.preorder(current.right);\n  }\n  postOrder(current = this.root) {\n    // left right node\n    if (!current) return;\n    this.postOrder(current.left);\n    this.postOrder(current.right);\n    console.log(current.value);\n  }\n  inOrder(current = this.root) {\n    if (!current) return;\n    this.inOrder(current.left);\n    console.log(current.value);\n    this.inOrder(current.right);\n  }\n}\nconst A = new BinaryTree();\nA.insert(5);\nA.insert(4);\nA.insert(6);\nA.insert(3);\nA.insert(7);\nA.insert(2);\nA.insert(8);\nA.insert(10);\nA.insert(9);\nA.preorder();\nA.postOrder();\nA.inOrder();\nexport default A;","map":{"version":3,"names":["TreeNode","constructor","value","left","right","BinaryTree","root","insert","newNode","console","log","current","preorder","postOrder","inOrder","A"],"sources":["/Users/madhusudhan/Desktop/interviewPrep2024/react-algo/src/algo.js"],"sourcesContent":["class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n};\n\nclass BinaryTree {\n  constructor (){\n    this.root = null;\n  }\n\n  insert(value){\n    let newNode = new TreeNode(value);\n    if(!this.root){\n      console.log(\"i am here\");\n      this.root = newNode;\n      return newNode;\n    }\n    let current = this.root;\n    while(true){\n      if(current.value > value){\n        if(!current.left){\n          current.left = newNode;\n          return;\n        }\n        current = current.left;\n      }else if (value > current.value){\n        if(!current.right){\n          current.right = newNode;\n          return;\n        }\n        current = current.right;\n      } else{\n        return;\n      }\n    }\n  }\n\n  preorder(current = this.root){\n    // node left right\n    if(!current) return;\n    console.log(current.value);\n      this.preorder(current.left);\n      this.preorder(current.right);\n  }\n\n  postOrder(current = this.root) {\n    // left right node\n    if(! current) return;\n    this.postOrder(current.left);\n    this.postOrder(current.right);\n    console.log(current.value);\n  }\n\n  inOrder(current = this.root) {\n    if(!current) return;\n    this.inOrder(current.left);\n    console.log(current.value);\n    this.inOrder(current.right);\n  }\n}\n\nconst A = new BinaryTree();\nA.insert(5);\nA.insert(4);\nA.insert(6);\nA.insert(3);\nA.insert(7);\nA.insert(2);\nA.insert(8);\nA.insert(10);\nA.insert(9);\nA.preorder();\nA.postOrder();\nA.inOrder();\nexport default A;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
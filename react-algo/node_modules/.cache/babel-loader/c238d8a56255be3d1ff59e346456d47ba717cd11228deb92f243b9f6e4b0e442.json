{"ast":null,"code":"class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n;\nclass BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n  insert(value) {\n    let newNode = new TreeNode(value);\n    if (!this.root) {\n      this.root = newNode;\n      return newNode;\n    }\n    let current = this.root;\n    while (true) {\n      if (current.value > value) {\n        if (!current.left) {\n          current.left = newNode;\n          return;\n        }\n        current = current.left;\n      } else if (value > current.value) {\n        if (!current.right) {\n          current.right = newNode;\n          return;\n        }\n        current = current.right;\n      } else {\n        return;\n      }\n    }\n  }\n  preorder(current = this.root) {\n    // node left right\n    if (!current) return;\n    console.log(current.value);\n    this.preorder(current.left);\n    this.preorder(current.right);\n  }\n  postOrder(current = this.root) {\n    // left right node\n    if (!current) return;\n    this.postOrder(current.left);\n    this.postOrder(current.right);\n    console.log(current.value);\n  }\n  inOrder(current = this.root) {\n    if (!current) return;\n    this.inOrder(current.left);\n    console.log(current.value);\n    this.inOrder(current.right);\n  }\n  search(current = this.root, compareValue) {\n    if (!current) return false;\n    if (current.value === compareValue) {\n      console.log(`found the value: ${compareValue}`);\n      return true;\n    }\n    this.search(current.left, compareValue);\n    this.search(current.right, compareValue);\n    return false;\n  }\n  maxDepthDFS(current = this.root, depth = 0) {\n    if (!current) return depth;\n    console.log(current.value);\n    return Math.max(this.maxDepth(current.left, depth + 1), this.maxDepth(current.right, depth + 1));\n  }\n  maxDepthBFS(current = this.root, depth = 0) {\n    let queue = [];\n    if (!current) return depth;\n    let innerLength = 0;\n    if (current.left) {\n      queue.push(current.left);\n    }\n    ;\n    if (current.right) {\n      queue.push(current.right);\n    }\n    ;\n    while (queue.length > 0) {\n      innerLength = queue.length;\n      for (var i = 0; i < innerLength; i++) {\n        depth++;\n        current = queue.shift();\n        if (current.left) {\n          queue.push(current.left);\n        }\n        ;\n        if (current.right) {\n          queue.push(current.right);\n        }\n        ;\n      }\n    }\n    return depth;\n  }\n}\nconst A = new BinaryTree();\nA.insert(5);\nA.insert(4);\nA.insert(6);\nA.insert(3);\nA.insert(7);\nA.insert(2);\nA.insert(8);\nA.insert(10);\nA.insert(9);\n// A.preorder();\n// A.postOrder();\n// A.inOrder();\nA.search(this.root, 10);\nconsole.log(A.maxDepthDFS(this.root));\nexport default A;","map":{"version":3,"names":["TreeNode","constructor","value","left","right","BinaryTree","root","insert","newNode","current","preorder","console","log","postOrder","inOrder","search","compareValue","maxDepthDFS","depth","Math","max","maxDepth","maxDepthBFS","queue","innerLength","push","length","i","shift","A"],"sources":["/Users/madhusudhan/Desktop/interviewPrep2024/react-algo/src/algo.js"],"sourcesContent":["class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n};\n\nclass BinaryTree {\n  constructor (){\n    this.root = null;\n  }\n\n  insert(value){\n    let newNode = new TreeNode(value);\n    if(!this.root){\n      this.root = newNode;\n      return newNode;\n    }\n    let current = this.root;\n    while(true){\n      if(current.value > value){\n        if(!current.left){\n          current.left = newNode;\n          return;\n        }\n        current = current.left;\n      }else if (value > current.value){\n        if(!current.right){\n          current.right = newNode;\n          return;\n        }\n        current = current.right;\n      } else{\n        return;\n      }\n    }\n  }\n\n  preorder(current = this.root){\n    // node left right\n    if(!current) return;\n    console.log(current.value);\n      this.preorder(current.left);\n      this.preorder(current.right);\n  }\n\n  postOrder(current = this.root) {\n    // left right node\n    if(! current) return;\n    this.postOrder(current.left);\n    this.postOrder(current.right);\n    console.log(current.value);\n  }\n\n  inOrder(current = this.root) {\n    if(!current) return;\n    this.inOrder(current.left);\n    console.log(current.value);\n    this.inOrder(current.right);\n  }\n\n  search(current = this.root, compareValue) {\n    if(!current) return false;\n    if(current.value === compareValue) {\n      console.log(`found the value: ${compareValue}`)\n      return true;\n    }\n    this.search(current.left, compareValue);\n    this.search(current.right, compareValue);\n    return false;\n  }\n\n  maxDepthDFS(current = this.root, depth = 0) {\n    if(!current) return depth;\n      console.log(current.value);\n    return Math.max(\n      this.maxDepth(current.left, depth + 1),\n      this.maxDepth(current.right, depth + 1)\n  );\n  }\n\n  maxDepthBFS(current = this.root, depth = 0) {\n    let queue = [];\n    if(!current) return depth;\n    let innerLength = 0;\n    if(current.left){\n      queue.push(current.left);\n    };\n    if(current.right){\n      queue.push(current.right);\n    };\n\n    while(queue.length > 0){\n      innerLength = queue.length;\n      for(var i = 0; i < innerLength; i++){\n        depth++;\n        current = queue.shift();\n        if(current.left){\n          queue.push(current.left);\n        };\n        if(current.right){\n          queue.push(current.right);\n        };\n      }\n    }\n    return depth;\n  }\n\n}\n\nconst A = new BinaryTree();\nA.insert(5);\nA.insert(4);\nA.insert(6);\nA.insert(3);\nA.insert(7);\nA.insert(2);\nA.insert(8);\nA.insert(10);\nA.insert(9);\n// A.preorder();\n// A.postOrder();\n// A.inOrder();\nA.search(this.root, 10);\nconsole.log(A.maxDepthDFS(this.root));\nexport default A;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}